{"version":3,"sources":["UseTheme.js","App.js","serviceWorker.js","index.js"],"names":["useTheme","theme","useLayoutEffect","key","document","documentElement","style","setProperty","themes","App","useState","themeIndex","setThemeIndex","className","map","i","type","name","value","checked","onChange","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAEaA,EAAS,SAACC,GACnBC,0BACA,WAEE,IAAK,IAAMC,KAAOF,EAEhBG,SAASC,gBAAgBC,MAAMC,YAA/B,YAAgDJ,GAAOF,EAAME,KAGjE,CAACF,K,KCkBL,IAAMO,EAAS,CACb,CACE,gBAAiB,OACjB,iBAAkB,OAClB,uBAAwB,MACxB,qBAAsB,SACtB,mBAAoB,OACpB,eAAgB,OAChB,oBAAqB,UACrB,wBAAyB,YACzB,sBAAuB,OACvB,qBAAsB,OACtB,0BAA2B,UAC3B,yBAA0B,mBAC1B,uBAAwB,OACxB,sBAAuB,UACvB,2BAA4B,WAE9B,CACE,gBAAiB,OACjB,iBAAkB,YAClB,uBAAwB,OACxB,qBAAsB,SACtB,mBAAoB,OACpB,eAAgB,OAChB,oBAAqB,qDACrB,wBAAyB,SACzB,sBAAuB,OACvB,qBAAsB,OACtB,0BACE,sDACF,yBAA0B,aAC1B,uBAAwB,OACxB,sBAAuB,OACvB,2BACE,uDAEJ,CACE,gBAAiB,iBACjB,iBAAkB,OAClB,uBAAwB,IACxB,qBAAsB,SACtB,mBAAoB,OACpB,eAAgB,OAChB,oBAAqB,OACrB,wBAAyB,SACzB,sBAAuB,iBACvB,qBAAsB,OACtB,0BAA2B,OAC3B,yBAA0B,OAC1B,uBAAwB,iBACxB,sBAAuB,OACvB,2BAA4B,YAIjBC,EAjFf,WAAgB,IAAD,EACuBC,mBAAS,GADhC,mBACNC,EADM,KACMC,EADN,KAKb,OAFAZ,EAASQ,EAAOG,IAGd,yBAAKE,UAAU,QACb,4BAAQA,UAAU,UAAlB,UACA,yBAAKA,UAAU,iBACZL,EAAOM,IAAI,SAACb,EAAOc,GAAR,OACV,2BAAOZ,IAAKY,GACV,2BACEC,KAAK,QACLC,KAAK,QACLC,MAAOH,EACPI,QAASR,IAAeI,EACxBK,SAAU,kBAAMR,EAAcG,YCRxBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASwB,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.e41f794f.chunk.js","sourcesContent":["import { useLayoutEffect } from 'react';   //useEffect\r\n\r\nexport const useTheme=(theme)=> {\r\n    useLayoutEffect(\r\n    () => {\r\n      // Iterate through each value in theme object\r\n      for (const key in theme) {\r\n        // Update css variables in document's root element\r\n        document.documentElement.style.setProperty(`--${key}`, theme[key]);  //--button-border none\r\n      }\r\n    },\r\n    [theme] // Only call again if theme object reference changes\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {useTheme} from './UseTheme'\r\nimport './styles.scss'\r\n\r\nfunction App() {\r\n  const [themeIndex, setThemeIndex] = useState(0);\r\n\r\n  useTheme(themes[themeIndex]);\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <button className=\"button\">Button</button>\r\n      <div className=\"theme-changer\">\r\n        {themes.map((theme, i) => (\r\n          <label key={i}>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"theme\"\r\n              value={i}\r\n              checked={themeIndex === i}\r\n              onChange={() => setThemeIndex(i)}\r\n            />\r\n          </label>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst themes = [\r\n  {\r\n    'button-border': 'none',\r\n    'button-padding': '16px',\r\n    'button-border-radius': '4px',\r\n    'button-font-weight': 'normal',\r\n    'button-font-size': '14px',\r\n    'button-color': '#FFF',\r\n    'button-background': '#6772e5',\r\n    'button-text-transform': 'uppercase',\r\n    'button-hover-border': 'none',\r\n    'button-hover-color': '#fff',\r\n    'button-hover-background': '#7795f8',\r\n    'button-hover-transform': 'translateY(-2px)',\r\n    'button-active-border': 'none',\r\n    'button-active-color': '#e6ebf1',\r\n    'button-active-background': '#555abf'\r\n  },\r\n  {\r\n    'button-border': 'none',\r\n    'button-padding': '20px 50px',\r\n    'button-border-radius': '90px',\r\n    'button-font-weight': 'normal',\r\n    'button-font-size': '20px',\r\n    'button-color': '#FFF',\r\n    'button-background': 'linear-gradient(to right, #DD5E89 0%, #F7BB97 80%)',\r\n    'button-text-transform': 'normal',\r\n    'button-hover-border': 'none',\r\n    'button-hover-color': '#fff',\r\n    'button-hover-background':\r\n      'linear-gradient(to right, #DD5E89 0%, #F7BB97 100%)',\r\n    'button-hover-transform': 'scale(1.1)',\r\n    'button-active-border': 'none',\r\n    'button-active-color': '#fff',\r\n    'button-active-background':\r\n      'linear-gradient(to right, #DD5E89 0%, #F7BB97 100%)'\r\n  },\r\n  {\r\n    'button-border': '1px solid #DDD',\r\n    'button-padding': '10px',\r\n    'button-border-radius': '0',\r\n    'button-font-weight': 'normal',\r\n    'button-font-size': '14px',\r\n    'button-color': '#000',\r\n    'button-background': '#FFF',\r\n    'button-text-transform': 'normal',\r\n    'button-hover-border': '1px solid #000',\r\n    'button-hover-color': '#000',\r\n    'button-hover-background': '#FFF',\r\n    'button-hover-transform': 'none',\r\n    'button-active-border': '1px solid #000',\r\n    'button-active-color': '#000',\r\n    'button-active-background': '#f7f7f7'\r\n  }\r\n];\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}